<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

	<!-- Anotações como @Controller, por exemplo, não são lidas por default. 
		O Spring sempre usa o XML como padrão. Para usarmos classes anotadas, temos 
		que configurar o XML do Spring com as tags mvc:annotation-driven e context:component-scan. -->
	<mvc:annotation-driven />

	<context:component-scan base-package="br.com.fluentcode.springmvc" />

	<!-- ViewResolver tem como objetivo integrar o Controller e o View, deixando-os 
		desacoplados. Quando um Controller é executado, ele devolve o nome da View 
		que deve ser renderizada para à DispatchServlet. Ela por sua vez passa o 
		nome para o ViewResolver que descobre a view concatenando o nome retornado 
		ao prefix e suffix configurados. -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- Integração do spring com o hibernate, com isso a SessionFactory, agora 
		controlada pelo Spring, pode ser injeta em todos os componentes do Spring. 
		Além disso, ao delegar o controle da SessionFactory para o Spring, ele consegue 
		abrir e fechar transações de maneira automática, de maneira muito parecida 
		com o JTA. -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="configLocation" value="classpath:hibernate.cfg.xml" />
		<property name="annotatedClasses">
			<list>
				<value>br.com.fluentcode.springmvc.entity.Product</value>
			</list>
		</property>
	</bean>

</beans>
