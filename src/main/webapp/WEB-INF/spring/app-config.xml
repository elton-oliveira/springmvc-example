<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

	<!-- Annotations such as @Controller, for example, are not read by default. 
		The Spring always uses XML as default. To use annotated classes, we have 
		to configure the Spring XML tags mvc:annotation-driven and context:component-scan. -->
	<mvc:annotation-driven />

	<context:component-scan base-package="br.com.fluentcode.springmvc" />

	<!-- ViewResolver maps view names to actual views. So when a view name is 
		returned by a Controller, the ViewResolver will resolve the view according 
		to the view name. ViewResolver discovers the view concatenating the view 
		name to the prefix and suffix configured. -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- Integração do spring com o hibernate, com isso a SessionFactory, agora 
		controlada pelo Spring, pode ser injeta em todos os componentes do Spring. 
		Agora também podemos configurar um Transaction Manager para que o Spring 
		consiga abrir e fechar transações de maneira automática. -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>
				<prop key="hibernate.connection.url">jdbc:mysql://localhost:3306/db_mvc</prop>
				<prop key="hibernate.connection.username">root</prop>
				<prop key="hibernate.connection.password"></prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>

				<!-- TODO para conseguir habilitar a tx do spring. Ver tambem o pom.xml -->
				<prop key="hibernate.c3p0.min_size">5</prop>
				<prop key="hibernate.c3p0.max_size">20</prop>
				<prop key="hibernate.c3p0.timeout">300</prop>
				<prop key="hibernate.c3p0.max_statements">50</prop>
				<prop key="hibernate.c3p0.idle_test_period">3000</prop>
				<!-- fim TODO -->
			</props>
		</property>
		<property name="annotatedClasses">
			<list>
				<value>br.com.fluentcode.springmvc.entity.Product</value>
			</list>
		</property>
	</bean>

	<!-- Transaction Manager configuration. Enables the Spring to open and close 
		hibernate transactions. The methods that the spring should manage transactions 
		must be configured with @Transaction -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- Enables @Transaction annotation. -->
	<tx:annotation-driven transaction-manager="transactionManager"/>

	<!-- Validation messages customization . Configure Spring to read a validation 
		messages file where the values ​​of the message keys are customized. -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="/WEB-INF/i18n/messages" />
	</bean>
	
	<!-- Enables the aspect (AOP) -->
	<aop:aspectj-autoproxy />

</beans>
